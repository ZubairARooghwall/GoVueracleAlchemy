CREATE TABLE USERS (
    USERID INTEGER PRIMARY KEY,
    USERNAME VARCHAR2(30) UNIQUE,
    EMAIL VARCHAR2(255),
    PASSWORD VARCHAR2(256),
    SALT RAW(64),
    USERROLE VARCHAR2(10),
    EDUCATION VARCHAR2(15),
    CREATIONTIME TIMESTAMP
);

CREATE TABLE PROFILES (
    PROFILEID INTEGER PRIMARY KEY,
    USERID INTEGER,
    PROFILEPICTURE VARCHAR2(255),
    STATUS BOOLEAN,
    BIOGRAPHY VARCHAR2(1000)
);

ALTER TABLE PROFILES ADD CONSTRAINT PROFILE_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS (USERID);

CREATE TABLE USERSESSIONS (
    SESSIONID INTEGER PRIMARY KEY,
    USERID INTEGER,
    SESSIONTOKEN VARCHAR2(64),
    EXPIRYDATE DATE,
    USERIPADDRESS VARCHAR2(15),
    BROWSER VARCHAR2(20)
);

ALTER TABLE USERSESSIONS ADD CONSTRAINT USERSESSIONS_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS (USERID);

CREATE TABLE FOLDERS (
    FOLDERID INTEGER PRIMARY KEY,
    USERID INTEGER,
    FOLDERNAME VARCHAR2(255) UNIQUE,
    CREATIONDATE TIMESTAMP,
    FOLDERSIZE INTEGER
);

ALTER TABLE FOLDERS ADD CONSTRAINT FOLDERS_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS (USERID);

CREATE TABLE TAGS (
    TAGNAME VARCHAR2(255) PRIMARY KEY,
    CREATIONTIME TIMESTAMP,
    COLOR VARCHAR2(7)
);

CREATE TABLE FILES (
    FILEID INTEGER PRIMARY KEY,
    FILENAME VARCHAR(255),
    UNIQUENAME VARCHAR(500),
    FILESIZE INTEGER,
    CREATIONTIME TIMESTAMP,
    OWNER INTEGER,
    FOLDER INTEGER,
    TAG VARCHAR2(255)
);

ALTER TABLE FILES ADD CONSTRAINT FILES_USERS_FK FOREIGN KEY (OWNER) REFERENCES USERS (USERID);

ALTER TABLE FILES ADD CONSTRAINT FILE_FOLDERS_FK FOREIGN KEY (FOLDER) REFERENCES FOLDERS (FOLDERID);

ALTER TABLE FILES ADD CONSTRAINT FILES_TAGS_FK FOREIGN KEY (TAG) REFERENCES TAGS (TAGNAME);

CREATE TABLE PERMISSIONS (
    PERMISSIONID INTEGER PRIMARY KEY,
    FILEID INTEGER,
    SENDER INTEGER,
    USERID INTEGER,
    PERMISSIONTYPE CHAR(1),
    CREATIONTIME TIMESTAMP
);

ALTER TABLE PERMISSIONS ADD CONSTRAINT PERMISSIONS_FILES_FK FOREIGN KEY (FILEID) REFERENCES FILES (FILEID);

ALTER TABLE PERMISSIONS ADD CONSTRAINT PERMISSIONS_SENDER_FK FOREIGN KEY (SENDER) REFERENCES USERS (USERID);

ALTER TABLE PERMISSIONS ADD CONSTRAINT PERMISSIONS_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS (USERID);

CREATE TABLE ACTIVITYLOGS (
    ACTIVITYID INTEGER PRIMARY KEY,
    ACTIVITY VARCHAR2(10),
    CREATIONTIME TIMESTAMP,
    USERID INTEGER,
    FILEID INTEGER
);

ALTER TABLE ACTIVITYLOGS ADD CONSTRAINT ACTIVITYLOGS_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS (USERID);

ALTER TABLE ACTIVITYLOGS ADD CONSTRAINT ACTIVITYLOGS_FILES_FK FOREIGN KEY (FILEID) REFERENCES FILES (FILEID);

CREATE TABLE MEETINGS (
    MEETINGID INTEGER PRIMARY KEY,
    TITLE VARCHAR2(255),
    DESCRIPTION VARCHAR2(500),
    ORGANIZERID INTEGER,
    STARTTIME TIMESTAMP,
    ENDTIME TIMESTAMP
);

ALTER TABLE MEETINGS ADD CONSTRAINT MEETINGS_USERS_FK FOREIGN KEY (ORGANIZERID) REFERENCES USERS (USERID);

CREATE TABLE MEETINGLOGS (
    MEETINGLOGSID INTEGER PRIMARY KEY,
    MEETINGID INTEGER,
    CREATIONTIME TIMESTAMP,
    USERID INTEGER,
    ACTIVITY VARCHAR2(20),
    DESCRIPTION VARCHAR2(1000)
);

ALTER TABLE MEETINGLOGS ADD CONSTRAINT MEETINGLOGS_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS (USERID);

CREATE TABLE NOTES (
    NOTEID INTEGER PRIMARY KEY,
    MEETINGID INTEGER,
    OWNER INTEGER,
    CREATIONTIME TIMESTAMP,
    CONTENT VARCHAR2(1000),
    PERMISSION CHAR(1)
);

ALTER TABLE NOTES ADD CONSTRAINT NOTES_MEETINGS_FK FOREIGN KEY (MEETINGID) REFERENCES MEETINGS (MEETINGID);

ALTER TABLE NOTES ADD CONSTRAINT NOTES_USERS_FK FOREIGN KEY (OWNER) REFERENCES USERS (USERID);

CREATE TABLE FRIENDSHIPS (
    FRIENDSHIPID INTEGER PRIMARY KEY,
    USERID INTEGER,
    FRIENDID INTEGER,
    STATUS VARCHAR2(20)
);

ALTER TABLE FRIENDSHIPS ADD CONSTRAINT FRIENDSHIPS_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS (USERID);

ALTER TABLE FRIENDSHIPS ADD CONSTRAINT FRIENDSHIP_FRIEND_FK FOREIGN KEY (FRIENDID) REFERENCES USERS (USERID);

CREATE TABLE MESSAGES (
    MESSAGEID INTEGER PRIMARY KEY,
    SENDER INTEGER,
    RECEIVER INTEGER,
    ISSENT BOOLEAN,
    ISREAD BOOLEAN,
    CREATIONTIME TIMESTAMP,
    CONTENT VARCHAR2(500)
);

ALTER TABLE MESSAGES ADD CONSTRAINT MESSAGES_SENDER_FK FOREIGN KEY (SENDER) REFERENCES USERS (USERID);

ALTER TABLE MESSAGES ADD CONSTRAINT MESSAGES_RECEIVER_FK FOREIGN KEY (RECEIVER) REFERENCES USERS (USERID);

CREATE TABLE NOTIFICATIONS (
    NOTIFICATIONID INTEGER PRIMARY KEY,
    TOUSER INTEGER,
    NOTIFICATIONTYPE CHAR(7),
    CREATIONTIME TIMESTAMP,
    FROMUSER INTEGER,
    CONTENT VARCHAR2(255),
    ISREAD BOOLEAN
);

ALTER TABLE NOTIFICATIONS ADD CONSTRAINT NOTIFICATIONS_TOUSER_FK FOREIGN KEY (TOUSER) REFERENCES USERS (USERID);

ALTER TABLE NOTIFICATIONS ADD CONSTRAINT NOTIFICATIONS_FROMUSER_FK FOREIGN KEY (FROMUSER) REFERENCES USERS (USERID);

-- Implement sequences and triggers on every table for autoincrementing

-- Sequence Users
CREATE SEQUENCE USERS_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

-- Trigger Users' UserID
CREATE OR REPLACE TRIGGER USERS_AUTO_INCREMENT BEFORE
    INSERT ON USERS FOR EACH ROW
BEGIN
    SELECT
        USERS_ID_SEQ.NEXTVAL INTO :NEW.USERID
    FROM
        DUAL;
END;

CREATE SEQUENCE PROFILEID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE TRIGGER PROFILE_AUTO_INCREMENT BEFORE INSERT ON PROFILES FOR EACH ROW BEGIN
    SELECT
        PROFILEID_SEQ.NEXTVAL INTO :NEW.PROFILEID
    FROM
        DUAL;
END;
CREATE SEQUENCE USERSESSIONID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE TRIGGER USERSESSIONS_AUTO_INCREMENT BEFORE INSERT ON USERSESSIONS FOR EACH ROW BEGIN
    SELECT
        USERSESSIONID_SEQ.NEXTVAL INTO :NEW.SESSIONID
    FROM
        DUAL;
END;
CREATE SEQUENCE FOLDERID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE TRIGGER FOLDERS_AUTO_INCREMENT BEFORE INSERT ON FOLDERS FOR EACH ROW BEGIN
    SELECT
        FOLDERID_SEQ.NEXTVAL INTO :NEW.FOLDERID
    FROM
        DUAL;
END;
 -- Tags don't need autoincrement because its primary key is varchar2
CREATE SEQUENCE FILEID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE TRIGGER FILES_AUTO_INCREMENT BEFORE INSERT ON FILES FOR EACH ROW BEGIN
    SELECT
        FILEID_SEQ.NEXTVAL INTO :NEW.FILEID
    FROM
        DUAL;
END;
CREATE SEQUENCE PERMISSIONID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE TRIGGER PERMISSIONS_AUTO_INCREMENT BEFORE INSERT ON PERMISSIONS FOR EACH ROW BEGIN
    SELECT
        PERMISSIONID_SEQ.NEXTVAL INTO :NEW.PERMISSIONID
    FROM
        DUAL;
END;
CREATE SEQUENCE ACTIVITYLOGID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE TRIGGER ACTIVITYLOGS_AUTO_INCREMENT BEFORE INSERT ON ACTIVITYLOGS FOR EACH ROW BEGIN
    SELECT
        ACTIVITYLOGID_SEQ.NEXTVAL INTO :NEW.ACTIVITYID
    FROM
        DUAL;
END;
CREATE SEQUENCE MEETINGID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE TRIGGER MEETINGS_AUTO_INCREMENT BEFORE INSERT ON MEETINGS FOR EACH ROW BEGIN
    SELECT
        MEETINGID_SEQ.NEXTVAL INTO :NEW.MEETINGID
    FROM
        DUAL;
END;
CREATE SEQUENCE MEETINGLOGID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE TRIGGER MEETINGLOGS_AUTO_INCREMENT BEFORE INSERT ON MEETINGLOGS FOR EACH ROW BEGIN
    SELECT
        MEETINGLOGID_SEQ.NEXTVAL INTO :NEW.MEETINGLOGSID
    FROM
        DUAL;
END;
CREATE SEQUENCE NOTEID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE TRIGGER NOTES_AUTO_INCREMENT BEFORE INSERT ON NOTES FOR EACH ROW BEGIN
    SELECT
        NOTEID_SEQ.NEXTVAL INTO :NEW.NOTEID
    FROM
        DUAL;
END;
CREATE SEQUENCE FRIENDSHIPID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE TRIGGER FRIENDSHIPS_AUTO_INCREMENT BEFORE INSERT ON FRIENDSHIPS FOR EACH ROW BEGIN
    SELECT
        FRIENDSHIPID_SEQ.NEXTVAL INTO :NEW.FRIENDSHIPID
    FROM
        DUAL;
END;
CREATE SEQUENCE MESSAGEID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE TRIGGER MESSAGES_AUTO_INCREMENT BEFORE INSERT ON MESSAGES FOR EACH ROW BEGIN
    SELECT
        MESSAGEID_SEQ.NEXTVAL INTO :NEW.MESSAGEID
    FROM
        DUAL;
END;
CREATE SEQUENCE NOTIFICATIONID_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE OR REPLACE TRIGGER NOTIFICATIONS_AUTO_INCREMENT BEFORE INSERT ON NOTIFICATIONS FOR EACH ROW BEGIN
    SELECT
        NOTIFICATIONID_SEQ.NEXTVAL INTO :NEW.NOTIFICATIONID
    FROM
        DUAL;
END;
 -- Trigger for populating ActivityLogs
CREATE OR REPLACE TRIGGER TRACK_ACTIVITY AFTER INSERT ON PERMISSIONS FOR EACH ROW BEGIN INSERT INTO ACTIVITYLOGS (
    ACTIVITYID,
    ACTIVITY,
    CREATIONTIME,
    USERID,
    FILEID
) VALUES (
    ACTIVITYLOGID_SEQ.NEXTVAL,
    'share',
    SYSTIMESTAMP,
    :NEW.USERID,
    :NEW.FILEID
);
INSERT INTO NOTIFICATIONS (
    NOTIFICATIONID,
    TOUSER,
    NOTIFICATIONTYPE,
    CREATIONTIME,
    FROMUSER,
    CONTENT,
    ISREAD
) VALUES (
    NOTIFICATIONID_SEQ.NEXTVAL,
    :NEW.USERID,
    'Share',
    SYSTIMESTAMP,
    :NEW.SENDER,
    'You have received a shared file from '
    || :NEW.SENDER,
    FALSE
);
END;
CREATE OR REPLACE TRIGGER NOTIFY_MESSAGE AFTER INSERT ON MESSAGES FOR EACH ROW BEGIN INSERT INTO NOTIFICATIONS (
    NOTIFICATIONID,
    TOUSER,
    NOTIFICATIONTYPE,
    CREATIONTIME,
    FROMUSER,
    CONTENT,
    ISREAD
) VALUES (
    NOTIFICATIONID_SEQ.NEXTVAL,
    :NEW.RECEIVER,
    'Message',
    SYSTIMESTAMP,
    :NEW.SENDER,
    'You have received a message from '
    || :NEW.SENDER,
    FALSE
);
END;