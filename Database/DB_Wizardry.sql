CREATE TABLE USERS (
    USERID INTEGER PRIMARY KEY,
    USERNAME VARCHAR2(30) UNIQUE,
    EMAIL VARCHAR2(255),
    PASSWORD VARCHAR2(256),
    SALT RAW(64),
    USERROLE VARCHAR2(10),
    EDUCATION VARCHAR2(15),
    CREATIONTIME TIMESTAMP
);

CREATE TABLE PROFILES (
    PROFILEID INTEGER PRIMARY KEY,
    USERID INTEGER,
    PROFILEPICTURE VARCHAR2(255),
    STATUS BOOLEAN,
    BIOGRAPHY VARCHAR2(1000)
);

ALTER TABLE PROFILES ADD CONSTRAINT PROFILE_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS(USERID);

CREATE TABLE USERSESSIONS (
    SESSIONID INTEGER PRIMARY KEY,
    USERID INTEGER,
    SESSIONTOKEN VARCHAR2(64),
    EXPIRYDATE DATE,
    USERIPADDRESS VARCHAR2(15),
    BROWSER VARCHAR2(20)
);

ALTER TABLE USERSESSIONS ADD CONSTRAINT USERSESSIONS_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS(USERID);

CREATE TABLE FOLDERS (
    FOLDERID INTEGER PRIMARY KEY,
    USERID INTEGER,
    FOLDERNAME VARCHAR2(255) UNIQUE,
    CREATIONDATE TIMESTAMP,
    FOLDERSIZE INTEGER
);

ALTER TABLE FOLDERS ADD CONSTRAINT FOLDERS_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS(USERID);

CREATE TABLE TAGS (
    TAGNAME VARCHAR2(255) PRIMARY KEY,
    CREATIONTIME TIMESTAMP,
    COLOR VARCHAR2(7)
);

CREATE TABLE FILES (
    FILEID INTEGER PRIMARY KEY,
    FILENAME VARCHAR(255),
    UNIQUENAME VARCHAR(500),
    FILESIZE INTEGER,
    CREATIONTIME TIMESTAMP,
    OWNER INTEGER,
    FOLDER INTEGER,
    TAG VARCHAR2(255)
);

ALTER TABLE FILES ADD CONSTRAINT FILES_USERS_FK FOREIGN KEY (OWNER) REFERENCES USERS(USERID);

ALTER TABLE FILES ADD CONSTRAINT FILE_FOLDERS_FK FOREIGN KEY (FOLDER) REFERENCES FOLDERS(FOLDERID);

ALTER TABLE FILES ADD CONSTRAINT FILES_TAGS_FK FOREIGN KEY (TAG) REFERENCES TAGS(TAGNAME);

CREATE TABLE PERMISSIONS (
    PERMISSIONID INTEGER PRIMARY KEY,
    FILEID INTEGER,
    USERID INTEGER,
    PERMISSIONTYPE CHAR(1),
    CREATIONTIME TIMESTAMP
);

ALTER TABLE PERMISSIONS ADD CONSTRAINT PERMISSIONS_FILES_FK FOREIGN KEY (FILEID) REFERENCES FILES(FILEID);

ALTER TABLE PERMISSIONS ADD CONSTRAINT PERMISSIONS_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS(USERID);

CREATE TABLE ACTIVITYLOGS (
    ACTIVITYID INTEGER PRIMARY KEY,
    ACTIVITY VARCHAR2(10),
    CREATIONTIME TIMESTAMP,
    USERID INTEGER,
    FILEID INTEGER
);

ALTER TABLE ACTIVITYLOGS ADD CONSTRAINT ACTIVITYLOGS_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS(USERID);

ALTER TABLE ACTIVITYLOGS ADD CONSTRAINT ACTIVITYLOGS_FILES_FK FOREIGN KEY (FILEID) REFERENCES FILES(FILEID);

CREATE TABLE MEETINGS (
    MEETINGID INTEGER PRIMARY KEY,
    TITLE VARCHAR2(255),
    DESCRIPTION VARCHAR2(500),
    ORGANIZERID INTEGER,
    STARTTIME TIMESTAMP,
    ENDTIME TIMESTAMP
);

ALTER TABLE MEETINGS ADD CONSTRAINT MEETINGS_USERS_FK FOREIGN KEY (ORGANIZERID) REFERENCES USERS(USERID);

CREATE TABLE MEETINGLOGS (
    MEETINGLOGSID INTEGER PRIMARY KEY,
    MEETINGID INTEGER,
    CREATIONTIME TIMESTAMP,
    USERID INTEGER,
    ACTIVITY VARCHAR2(20),
    DESCRIPTION VARCHAR2(1000)
);

ALTER TABLE MEETINGLOGS ADD CONSTRAINT MEETINGLOGS_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS(USERID);

CREATE TABLE NOTES (
    NOTEID INTEGER PRIMARY KEY,
    MEETINGID INTEGER,
    OWNER INTEGER,
    CREATIONTIME TIMESTAMP,
    CONTENT VARCHAR2(1000),
    PERMISSION CHAR(1)
);

ALTER TABLE NOTES ADD CONSTRAINT NOTES_MEETINGS_FK FOREIGN KEY (MEETINGID) REFERENCES MEETINGS(MEETINGID);

ALTER TABLE NOTES ADD CONSTRAINT NOTES_USERS_FK FOREIGN KEY (OWNER) REFERENCES USERS(USERID);

CREATE TABLE FRIENDSHIPS (
    FRIENDSHIPID INTEGER PRIMARY KEY,
    USERID INTEGER,
    FRIENDID INTEGER,
    STATUS VARCHAR2(20)
);

ALTER TABLE FRIENDSHIPS ADD CONSTRAINT FRIENDSHIPS_USERS_FK FOREIGN KEY (USERID) REFERENCES USERS(USERID);

ALTER TABLE FRIENDSHIPS ADD CONSTRAINT FRIENDSHIP_FRIEND_FK FOREIGN KEY (FRIENDID) REFERENCES USERS(USERID);

CREATE TABLE MESSAGES (
    MESSAGEID INTEGER PRIMARY KEY,
    SENDER INTEGER,
    RECEIVER INTEGER,
    ISSENT BOOLEAN,
    ISREAD BOOLEAN,
    CREATIONTIME TIMESTAMP,
    CONTENT VARCHAR2(500)
);

ALTER TABLE MESSAGES ADD CONSTRAINT MESSAGES_SENDER_FK FOREIGN KEY (SENDER) REFERENCES USERS(USERID);

ALTER TABLE MESSAGES ADD CONSTRAINT MESSAGES_RECEIVER_FK FOREIGN KEY (RECEIVER) REFERENCES USERS(USERID);

CREATE TABLE NOTIFICATIONS (
    NOTIFICATIONID INTEGER PRIMARY KEY,
    TOUSER INTEGER,
    NOTIFICATIONTYPE CHAR(7),
    CREATIONTIME TIMESTAMP,
    FROMUSER INTEGER,
    CONTENT VARCHAR2(255),
    ISREAD BOOLEAN
);

ALTER TABLE NOTIFICATIONS ADD CONSTRAINT NOTIFICATIONS_TOUSER_FK FOREIGN KEY (TOUSER) REFERENCES USERS(USERID);

ALTER TABLE NOTIFICATIONS ADD CONSTRAINT NOTIFICATIONS_FROMUSER_FK FOREIGN KEY (FROMUSER) REFERENCES USERS(USERID);


-- Implement sequences and triggers on every table for autoincrementing

